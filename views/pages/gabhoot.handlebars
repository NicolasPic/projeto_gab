<div class="body-container">
    <div class="half-container superior">
    </div>

    <div class="half-container inferior">
        <div class="container" style="margin-top: -400px; justify-content: flex-start; gap: 15px; background-color: rgba(var(--background-light), 0.9);">
            <p id="tempo-restante">Tempo restante: <span id="tempo">20</span> segundos</p>

            <form id="form-resposta" method="POST">
                <input type="hidden" name="resposta" id="resposta-selecionada">
                <input type="hidden" name="tempoRestante" id="tempo-restante-valor">

                <div class="pergunta">
                    <h2>{{pergunta.texto}}</h2>
                    {{#each pergunta.respostas}}
                    <div class="resposta">
                        <label>
                            <input type="radio" name="resposta" value="{{id}}" onchange="selecionarResposta(this.value)">
                            {{texto}}
                        </label>
                    </div>
                    {{/each}}
                </div>

                <div id="feedback" class="alert feedback correct" style="display: none;">
                    <p id="mensagem-feedback">Resposta correta!</p>
                </div>

                <button type="submit" class="button">Enviar Resposta</button>
            </form>
        </div>
    </div>
</div>


<script src="/socket.io/socket.io.js"></script>
<script>
let tempo = 20;
const tempoRestanteEl = document.getElementById('tempo');
const form = document.getElementById('form-resposta');
const inputResposta = document.getElementById('resposta-selecionada');
const inputTempoRestante = document.getElementById('tempo-restante-valor');
const feedbackDiv = document.getElementById('feedback');
const mensagemFeedback = document.getElementById('mensagem-feedback');

function selecionarResposta(valor) {
    inputResposta.value = valor || '';
}

const socket = io();
const codigoSala = "{{codigoSala}}";
const usuarioID = "{{usuarioID}}"; 

socket.on('connect', () => {
    console.log(`Conectado ao socket com ID: ${socket.id}`);
    socket.emit('reconectar', { usuarioID });
});

socket.on('redirect', (url) => {
    console.log(`Redirecionando para: ${url}`);
    window.location.href = url;
});

const contador = setInterval(() => {
    tempo--;
    tempoRestanteEl.textContent = tempo;

    if (tempo <= 0) {
        clearInterval(contador);
        inputTempoRestante.value = 0;
        enviarResposta(true); 
    }
}, 1000);

form.addEventListener('submit', (event) => {
    event.preventDefault();
    enviarResposta();
});

async function enviarResposta(tempoEsgotado = false) {
    const botaoEnviar = form.querySelector('button[type="submit"]');
    botaoEnviar.disabled = true;
    botaoEnviar.textContent = "Enviando...";

    const radios = document.querySelectorAll('input[name="resposta"]');
    radios.forEach((radio) => {
        radio.disabled = true;
    });

    clearInterval(contador);
    inputTempoRestante.value = tempo;

    const respostaSelecionada = inputResposta.value;

    if (!tempoEsgotado && !respostaSelecionada) {
        alert('Selecione uma resposta antes de enviar.');
        botaoEnviar.disabled = false;
        botaoEnviar.textContent = "Enviar Resposta";

        radios.forEach((radio) => {
            radio.disabled = false;
        });

        return;
    }

    const respostaFinal = tempoEsgotado ? "vazia" : respostaSelecionada;

    try {
        const response = await fetch('/jogar/proxima', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                resposta: respostaFinal,
                tempoRestante: tempo
            })
        });

        const data = await response.json();
        feedbackDiv.classList.remove('correct', 'incorrect');

        if (data.correta == 1 && !tempoEsgotado) {
            mensagemFeedback.textContent = 'Resposta correta!';
            feedbackDiv.classList.add('correct');
        } else {
            mensagemFeedback.textContent = tempoEsgotado
                ? 'Tempo esgotado. Resposta considerada incorreta.'
                : 'Resposta incorreta.';
            feedbackDiv.classList.add('incorrect');
        }

        feedbackDiv.style.display = 'block';

        setTimeout(() => {
            if (data.proximaPergunta) {
                window.location.href = '/jogar/gabhoot';
            } else {
                window.location.href = '/jogar/espera';
            }
        }, 3000);
    } catch (error) {
        console.error('Erro ao enviar resposta:', error);
        alert('Ocorreu um erro ao enviar sua resposta. Tente novamente.');
        botaoEnviar.disabled = false;
        botaoEnviar.textContent = "Enviar Resposta";

        radios.forEach((radio) => {
            radio.disabled = false;
        });
    }
}
</script>

